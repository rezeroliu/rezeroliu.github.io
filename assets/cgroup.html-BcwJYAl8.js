import{_ as s,c as i,o as a,d as n}from"./app-Cqb0--ma.js";const e="/assets/cgroup1-Ynyj4hdX.png",t="/assets/cgroup2-Ch1gu-EP.png",l="/assets/cgroup3-PQTZP3aI.png",p="/assets/cgroup4-B9SdooGV.png",h="/assets/cgroup5-D1bH37vh.png",k="/assets/cgroup6-CKdjN2bV.png",r={},d=n('<h1 id="使用systemd限制服务cpu导致实时进程启动失败" tabindex="-1"><a class="header-anchor" href="#使用systemd限制服务cpu导致实时进程启动失败"><span>使用systemd限制服务cpu导致实时进程启动失败</span></a></h1><h2 id="前情提要" tabindex="-1"><a class="header-anchor" href="#前情提要"><span>前情提要</span></a></h2><p>我们组开发并维护的一个Linux上的服务，最近突然被隔壁团队测试同事发现会导致他们的业务进程启动不了。经过排查发现由于我们的服务是由systemd管理的，并且通过systemd的配置项来限制了服务整体的cpu和内存资源，这样在服务启动后会在 <code>/sys/fs/cpu,cpuacct</code> 目录下生成一个 <code>system.slice</code> 目录，这个目录下又会产生所有systemd管理的服务单元(service/unit)及其对应的cgroup文件，其中 <code>cpu.rt_runtime_us</code> 文件生成时会写入默认值0，这就导致限制了所有服务单元的实时进程无法分配到cpu时间，从而实时进程无法启动。</p><h2 id="cgroup" tabindex="-1"><a class="header-anchor" href="#cgroup"><span>CGroup</span></a></h2><p>cgroups(Control Groups) 是 linux 内核提供的一种机制，这种机制可以根据需求把一系列系统任务及其子任务整合(或分隔)到按资源划分等级的不同组内，从而为系统资源管理提供一个统一的框架。简单说，cgroups可以限制、记录任务组所使用的物理资源。</p><p>关于cgroup更细致的介绍可以参考<a href="https://www.kernel.org/doc/html/latest/admin-guide/cgroup-v1/index.html" target="_blank" rel="noopener noreferrer">官方文档</a>。</p><p>那么systemd为什么又会和cgroup扯上关系呢？ 简答来说 cgroups 的能力有两个：层级结构(A)和资源控制(B)。首先 cgroups 是以层级结构组织并标识进程的一种方式，同时它也是在该层级结构上执行资源限制的一种方式。我们简单的把 cgroups 的层级结构称为 A，把 cgrpups 的资源控制能力称为 B。</p><p>层级结构对于systemd来说是必须的，但资源控制是可选的。在系统启动阶段，systemd 会把支持的 controllers (subsystem 子系统)挂载到默认的 <code>/sys/fs/cgroup/</code> 目录下面：</p><figure><img src="'+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>例如，<code>/sys/fs/cgroup/cpu,cpuaccu/</code> 是cpu控制子系统，<code>/sys/fs/cgroup/memory/</code> 是内存控制子系统</p><p>正常情况下 <code>/sys/fs/cgroup/cpu,cpuaccu/</code> 目录的内容如下：</p><figure><img src="'+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>其中 <code>cpu.rt_period_us</code> 以微秒为单位，指定cgroup对CPU资源访问重新分配的频率，<code>cpu.rt_runtime_us</code> 同样以微秒为单位，指定在一个重新分配的时间区间中，此cgroup中的任务对CPU资源连续访问的最大时间。上图中的配置即表示，在1秒内，root cgroup 中的所有任务对CPU连续访问的最大时间是950ms。</p><h2 id="什么是fifo进程" tabindex="-1"><a class="header-anchor" href="#什么是fifo进程"><span>什么是FIFO进程</span></a></h2><p>linux的进程调度有三种策略：</p><ul><li>SCHED_FIFO：先进先出实时策略，相同优先级的线程按到达顺序排队。</li><li>SCHED_RR：简单的轮循实时调度，所有优先级相同的线程依次获得CPU时间</li><li>SCHED_OTHER：分时调度，是完全公平调度（CFS）的实现</li></ul><p>其中 SCHED_FIFO 和 SCHED_RR 都是实时进程的调度策略，linux中实时进程的优先级(0-99)都比普通进程的优先级(100-139)高，且直到进程退出之前始终是活动进程。前面提到的 <code>cpu.rt_runtime_us</code> 就是用来限制 cgroup 中实时进程对cpu的占用， <code>cpu.rt_runtime_us=-1</code> 可以使当前cgroup中的实时进程运行不受限制。但是这样可能导致在进程出现严重故障时os无法分到CPU时间片进行恢复，影响系统稳定性。</p><h2 id="如何使用systemd限制service的资源占用" tabindex="-1"><a class="header-anchor" href="#如何使用systemd限制service的资源占用"><span>如何使用systemd限制service的资源占用</span></a></h2><p>现在使用go实现一个 my-cgroup.service 服务，可以借助<a href="https://github.com/kardianos/service" target="_blank" rel="noopener noreferrer">github.com/kardianos/service</a>开源库来实现，代码中只有一个死循环：</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#98C379;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#98C379;">os</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#98C379;">github.com/kardianos/service</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> SystemService</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">ss </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">SystemService</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Start</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">s</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> service</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Service</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;coming Start.......&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	go</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> ss</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> nil</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">ss </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">SystemService</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;coming run.......&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">ss </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">SystemService</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Stop</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">s</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> service</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Service</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;coming Stop.......&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> nil</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;service.Interactive()----&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">service</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Interactive</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	svcConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">service</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Config</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">		Name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:        </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;my-cgroup&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">		DisplayName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;custom service&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">		Description</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;this is github.com/kardianos/service test case&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	ss</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">SystemService</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	s</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> service</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">New</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ss</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">svcConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> err</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">		fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;service New failed, err: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%v</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">		os</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Exit</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">os</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Args</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">		err</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> service</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Control</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">os</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Args</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> err</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">			fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;service Control 111 failed, err: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%v</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">			os</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Exit</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	// 默认 运行 Run</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	err</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> s</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Run</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> err</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">		fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;service Control 222 failed, err: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%v</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">		os</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Exit</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务启动后观察cpu使用情况如下：</p><figure><img src="`+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>此时查看 <code>/sys/fs/cgroup/cpu,cpuaccu/</code> 目录下是没有 <code>system.slice</code> 目录的。 可以使用systemctl set-property来限制其CPU:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> set-property</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> my-cgroup.service</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> CPUQuota=5%</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>代码不变，重启服务后可以看到进程对应的cpu占用被限制到了5%以下：</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>同时可以看到 <code>/sys/fs/cgroup/cpu,cpuaccu/</code> 目录下多了 <code>system.slice</code> 目录，但是 <code>system.slice</code> 目录下除了刚创建的 <code>my-cgroup</code> 之外，还多了其他许多目录：</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>同时可以看到 <code>system.slice/cpu.rt_runtime_us</code> 的值为0，也就是说整个system.slice子cgroup中的实时进程无法分配到cpu时间，也就无法启动了。</p><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>但是<strong>为什么在限制cpu之前 <code>/sys/fs/cgroup/cpu,cpuaccu/</code> 目录下没有 <code>system.slice</code> 目录，而限制cpu之后 <code>/sys/fs/cgroup/cpu,cpuaccu/</code> 目录下出现了 <code>system.slice</code> 目录，并且 <code>system.slice</code> 目录中同时多了很多其他的 .service目录呢？</strong></p><p>因为 <code>systemctl set-property</code> 限制资源本质上也是通过cgroup实现的，同时由于我们创建的 <code>my-cgroup</code> 是system管理的，所以会在root cgroup下生成system.slice目录，同时systemd会创建所有的受其管理的服务单元，并且生成此cgroup的cpu相关文件，其中 <code>cpu.rt_runtime_us</code> 的内容是默认值0。同时由于cgroup的层级结构，就会导致 system.slice 中所有子cgroup中的实时进程无法获取到cpu时间。</p><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span>解决方案：</span></a></h2><h3 id="方案一" tabindex="-1"><a class="header-anchor" href="#方案一"><span>方案一</span></a></h3><p>既然是由于cgroup的 <code>cpu.rt_runtime_us=0</code> 导致实时进程无法启动，那我把这个值改为大于0不就好了？ 这当然是最简单的方法，但是因为cgroup的层级结构原因，需要满足所有子cgroup的 <code>cpu.rt_runtime_us</code> 之和不能超过其父cgroup对应的值，同时由于root cgroup也就是 <code>/sys/fs/cgroup/cpu,cpuaccu/</code> 下可能会有多个子cgroup，在不了解各子cgroup实时进程对cgroup需求的情况下修改，可能也会存在问题。因此这种方法<strong>不太建议</strong>。</p><h3 id="方案二" tabindex="-1"><a class="header-anchor" href="#方案二"><span>方案二</span></a></h3><p>虽然创建的 <code>my-cgroup.service</code> 是一个system服务，但是我们也可以不使用systemd来限制其资源，而是直接使用cgroup来限制其cpu等资源。具体来说，可以分为以下步骤：</p><ol><li>启动服务主进程</li><li>在root cgroup下创建一个子cgroup</li><li>将服务主进程加入到cgroup中</li></ol><p>这样自己通过cgroup来限制服务资源占用，就不会在 <code>/sys/fs/cgroup/cpu,cpuaccu/</code> 目录下创建 <code>system.slice</code> 目录，也就不会影响到systemd管理的其他服务单元的实时进程了。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>如果服务单元主进程还会拉起子进程，需要在<strong>启动子进程之前</strong>将主进程加入到创建的cgroup中去，这样才能使所有启动的子进程继承主进程的cgroup配置，从而使整个服务单元的资源被限定到设置的值以内。</p></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p><a href="https://www.kernel.org/doc/html/latest/admin-guide/cgroup-v1/index.html" target="_blank" rel="noopener noreferrer">Control Groups version 1</a></p><p><a href="https://docs.redhat.com/zh-cn/documentation/red_hat_enterprise_linux/9/html/managing_monitoring_and_updating_the_kernel/proc_allocating-system-resources-using-systemd_assembly_using-systemd-to-manage-resources-used-by-applications#proc_allocating-system-resources-using-systemd_assembly_using-systemd-to-manage-resources-used-by-applications" target="_blank" rel="noopener noreferrer">使用 systemd 分配系统资源</a></p><p><a href="https://zhuanlan.zhihu.com/p/75422252" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/75422252</a></p><p><a href="https://www.baeldung-cn.com/linux/real-time-process-scheduling" target="_blank" rel="noopener noreferrer">Linux中的实时进程调度</a></p>',45),c=[d];function g(o,y){return a(),i("div",null,c)}const B=s(r,[["render",g],["__file","cgroup.html.vue"]]),m=JSON.parse('{"path":"/code/linux/cgroup.html","title":"使用systemd限制服务cpu导致实时进程启动失败","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-11-20T00:00:00.000Z","category":["Linux"],"tag":["FIFO进程","cgroup","systemd"],"star":true,"footer":false,"editLink":false,"description":"使用systemd限制服务cpu导致实时进程启动失败 前情提要 我们组开发并维护的一个Linux上的服务，最近突然被隔壁团队测试同事发现会导致他们的业务进程启动不了。经过排查发现由于我们的服务是由systemd管理的，并且通过systemd的配置项来限制了服务整体的cpu和内存资源，这样在服务启动后会在 /sys/fs/cpu,cpuacct 目录下生...","head":[["meta",{"property":"og:url","content":"https://rezeroliu.github.io/code/linux/cgroup.html"}],["meta",{"property":"og:site_name","content":"旺仔珍知棒"}],["meta",{"property":"og:title","content":"使用systemd限制服务cpu导致实时进程启动失败"}],["meta",{"property":"og:description","content":"使用systemd限制服务cpu导致实时进程启动失败 前情提要 我们组开发并维护的一个Linux上的服务，最近突然被隔壁团队测试同事发现会导致他们的业务进程启动不了。经过排查发现由于我们的服务是由systemd管理的，并且通过systemd的配置项来限制了服务整体的cpu和内存资源，这样在服务启动后会在 /sys/fs/cpu,cpuacct 目录下生..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-04T13:36:18.000Z"}],["meta",{"property":"article:author","content":"Rezero.Liu"}],["meta",{"property":"article:tag","content":"FIFO进程"}],["meta",{"property":"article:tag","content":"cgroup"}],["meta",{"property":"article:tag","content":"systemd"}],["meta",{"property":"article:published_time","content":"2024-11-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-04T13:36:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用systemd限制服务cpu导致实时进程启动失败\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-04T13:36:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Rezero.Liu\\",\\"url\\":\\"https://rezeroliu.github.io\\"}]}"]]},"headers":[{"level":2,"title":"前情提要","slug":"前情提要","link":"#前情提要","children":[]},{"level":2,"title":"CGroup","slug":"cgroup","link":"#cgroup","children":[]},{"level":2,"title":"什么是FIFO进程","slug":"什么是fifo进程","link":"#什么是fifo进程","children":[]},{"level":2,"title":"如何使用systemd限制service的资源占用","slug":"如何使用systemd限制service的资源占用","link":"#如何使用systemd限制service的资源占用","children":[]},{"level":2,"title":"解决方案：","slug":"解决方案","link":"#解决方案","children":[{"level":3,"title":"方案一","slug":"方案一","link":"#方案一","children":[]},{"level":3,"title":"方案二","slug":"方案二","link":"#方案二","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1732454262000,"updatedTime":1733319378000,"contributors":[{"name":"LuckyGoGo","email":"7643936+luckygogo@user.noreply.gitee.com","commits":2}]},"readingTime":{"minutes":6.11,"words":1832},"filePathRelative":"code/linux/cgroup.md","localizedDate":"2024年11月20日","excerpt":"\\n<h2>前情提要</h2>\\n<p>我们组开发并维护的一个Linux上的服务，最近突然被隔壁团队测试同事发现会导致他们的业务进程启动不了。经过排查发现由于我们的服务是由systemd管理的，并且通过systemd的配置项来限制了服务整体的cpu和内存资源，这样在服务启动后会在 <code>/sys/fs/cpu,cpuacct</code> 目录下生成一个 <code>system.slice</code> 目录，这个目录下又会产生所有systemd管理的服务单元(service/unit)及其对应的cgroup文件，其中 <code>cpu.rt_runtime_us</code> 文件生成时会写入默认值0，这就导致限制了所有服务单元的实时进程无法分配到cpu时间，从而实时进程无法启动。</p>","autoDesc":true}');export{B as comp,m as data};
