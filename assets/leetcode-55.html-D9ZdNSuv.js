import{_ as i,c as s,o as a,d as t}from"./app-Cqb0--ma.js";const e={},n=t(`<h1 id="leetcode-45-跳跃游戏ii" tabindex="-1"><a class="header-anchor" href="#leetcode-45-跳跃游戏ii"><span>Leetcode.45 跳跃游戏II</span></a></h1><blockquote><p>给定一个非负整数数组，你最初位于数组的第一个位置。数组中的每个元素代表你在该位置可以跳跃的最大长度。你的目标是使用最少的跳跃次数到达数组的最后一个位置。 <strong>示例</strong>  输入: [2,3,1,1,4]  输出: 2  解释: 跳到最后一个位置的最小跳跃数是 2。     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。</p></blockquote><h2 id="思路-还是贪心算法" tabindex="-1"><a class="header-anchor" href="#思路-还是贪心算法"><span>思路：还是贪心算法</span></a></h2><p>对于每个位置，维护当前可以到达的最远位置(边界)，保存这个边界位置并继续遍历数组并更新每个位置可以到达的最远位置，如果遍历到了边界，则更新边界为当前可以到达的最远位置，并且步数+1。注意到只需要遍历到倒数第二个位置，因为如果最后一个位置可以到达，那么在倒数第二个位置的时候，边界一定是大于等于最后一个位置的。 这里就需要考虑<strong>末尾是否可以到达</strong>这个问题了，虽然题目说了假设总可以到达最后一个位置，但是多考虑一点肯定没坏处。代码中注释的很清楚了，如果遍历到某个边界位置，并且边界位置就是更新后的最远可到达位置，那么最远只能到达当前位置。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Solution</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> jump</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">nums</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> steps</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> maxPos</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, end </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> nums</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            maxPos </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Math</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(maxPos, i </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> nums[i]);   </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 更新可以到达的最远位置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(i </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> end){                     </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 到达边界则更新边界，跳跃步数+1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(end </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> maxPos) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 已经到达边界处，并且发现边界处就是最远可以到达的位置，那么肯定无法到达最后一个位置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                end </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> maxPos;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                steps</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> steps;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),l=[n];function h(k,p){return a(),s("div",null,l)}const d=i(e,[["render",h],["__file","leetcode-55.html.vue"]]),o=JSON.parse('{"path":"/code/leetcode/leetcode-55.html","title":"Leetcode.45 跳跃游戏II","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2020-6-03","category":["刷题笔记"],"tag":["贪心算法"],"permalink":"/code/leetcode/leetcode-55.html","description":"Leetcode.45 跳跃游戏II 给定一个非负整数数组，你最初位于数组的第一个位置。数组中的每个元素代表你在该位置可以跳跃的最大长度。你的目标是使用最少的跳跃次数到达数组的最后一个位置。 示例 输入: [2,3,1,1,4] 输出: 2 解释: 跳到最后一个位置的最小跳跃数是 2。 从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到...","head":[["meta",{"property":"og:url","content":"https://rezeroliu.github.io/code/leetcode/leetcode-55.html"}],["meta",{"property":"og:site_name","content":"旺仔珍知棒"}],["meta",{"property":"og:title","content":"Leetcode.45 跳跃游戏II"}],["meta",{"property":"og:description","content":"Leetcode.45 跳跃游戏II 给定一个非负整数数组，你最初位于数组的第一个位置。数组中的每个元素代表你在该位置可以跳跃的最大长度。你的目标是使用最少的跳跃次数到达数组的最后一个位置。 示例 输入: [2,3,1,1,4] 输出: 2 解释: 跳到最后一个位置的最小跳跃数是 2。 从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-24T13:17:42.000Z"}],["meta",{"property":"article:author","content":"Rezero.Liu"}],["meta",{"property":"article:tag","content":"贪心算法"}],["meta",{"property":"article:published_time","content":"2020-06-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-24T13:17:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Leetcode.45 跳跃游戏II\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-24T13:17:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Rezero.Liu\\",\\"url\\":\\"https://rezeroliu.github.io\\"}]}"]]},"headers":[{"level":2,"title":"思路：还是贪心算法","slug":"思路-还是贪心算法","link":"#思路-还是贪心算法","children":[]}],"git":{"createdTime":1732454262000,"updatedTime":1732454262000,"contributors":[{"name":"LuckyGoGo","email":"7643936+luckygogo@user.noreply.gitee.com","commits":1}]},"readingTime":{"minutes":1.76,"words":529},"filePathRelative":"code/leetcode/leetcode-55.md","localizedDate":"2020年6月3日","excerpt":"\\n<blockquote>\\n<p>给定一个非负整数数组，你最初位于数组的第一个位置。数组中的每个元素代表你在该位置可以跳跃的最大长度。你的目标是使用最少的跳跃次数到达数组的最后一个位置。\\n<strong>示例</strong>\\n 输入: [2,3,1,1,4]\\n 输出: 2\\n 解释: 跳到最后一个位置的最小跳跃数是 2。\\n&nbsp;      从下标为 0 跳到下标为 1 的位置，跳&nbsp;1&nbsp;步，然后跳&nbsp;3&nbsp;步到达数组的最后一个位置。</p>\\n</blockquote>\\n<h2>思路：还是贪心算法</h2>\\n<p>对于每个位置，维护当前可以到达的最远位置(边界)，保存这个边界位置并继续遍历数组并更新每个位置可以到达的最远位置，如果遍历到了边界，则更新边界为当前可以到达的最远位置，并且步数+1。注意到只需要遍历到倒数第二个位置，因为如果最后一个位置可以到达，那么在倒数第二个位置的时候，边界一定是大于等于最后一个位置的。\\n这里就需要考虑<strong>末尾是否可以到达</strong>这个问题了，虽然题目说了假设总可以到达最后一个位置，但是多考虑一点肯定没坏处。代码中注释的很清楚了，如果遍历到某个边界位置，并且边界位置就是更新后的最远可到达位置，那么最远只能到达当前位置。</p>","autoDesc":true}');export{d as comp,o as data};
